#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('file-server:server');
const http = require('http');
const meow = require('meow');
const path = require('path');

/** 
 * Accept CLI arguments
 */
const cli = meow(`
	Usage
	  $ npm start [options] [files]
	  files is an array of paths to files you want to share

	Options
	  --destination, -d	PATH	Save uploaded files to folder specified in path (defaults to uploads folder in app directory)
	  --list, -l		PATH	Read files to share from the list given in path
	  --port, -p		PORT	Start server on specified port (default 3000)

	Examples
	  $ npm start 
`, {
	booleanDefault: undefined,
	flags: {
		destination: {
			type: 'string',
			default: path.resolve(__dirname, '../uploads'),
			alias: 'd'
		},
		list: {
			type: 'string',
			default: '',
			alias: 'l'
		},
		port: {
			type: 'number',
			default: 3000,
			alias: 'p'
		}
	}
});

/**
 * Start Express app from the CLI flags
 */

require('../app')(cli).then((app) =>{

	/**
	 * Get port from environment and store in Express.
	 */

	const port = normalizePort(cli.flags.port);
	app.set('port', port);

	/**
	 * Create HTTP server.
	 */

	const server = http.createServer(app);

	/**
	 * Listen on provided port, on all network interfaces.
	 */

	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);

	/**
	 * Normalize a port into a number, string, or false.
	 */

	function normalizePort(val) {
	  const port = parseInt(val, 10);

	  if (isNaN(port)) {
		// named pipe
		return val;
	  }

	  if (port >= 0) {
		// port number
		return port;
	  }

	  return false;
	}

	/**
	 * Event listener for HTTP server "error" event.
	 */

	function onError(error) {
	  if (error.syscall !== 'listen') {
		throw error;
	  }

	  const bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	  // handle specific listen errors with friendly messages
	  switch (error.code) {
		case 'EACCES':
		  console.error(bind + ' requires elevated privileges');
		  process.exit(1);
		  break;
		case 'EADDRINUSE':
		  console.error(bind + ' is already in use');
		  process.exit(1);
		  break;
		default:
		  throw error;
	  }
	}

	/**
	 * Event listener for HTTP server "listening" event.
	 */

	function onListening() {
	  const addr = server.address();
	  const bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	  debug('Listening on ' + bind);
	}
});
